{"version":3,"sources":["components/Square.tsx","game/state.ts","components/Board.tsx","agent/Agent.ts","agent/RandomAgent.ts","agent/MinmaxAgent.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","square","disabled","isPartOfWinner","onClick","Button","className","outline","color","size","Player","SquareState","InitialBoard","Empty","nextPlayer","state","numX","numO","forEach","row","X","O","console","log","Error","validActions","player","flatMap","boardRow","map","col","position","filter","x","play","action","symbol","i","y","j","range","winner","board","triples","triple","every","some","Board","onAction","isGameOver","undefined","key","Agent","name","this","RandomAgent","actions","sample","MinmaxAgent","value","currentWinner","frontier","maxBy","minBy","randomAgents","minmaxAgents","PlayerSelect","label","onSelect","randomAgent","minmaxAgent","UncontrolledButtonDropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","App","useState","setBoard","agentX","setAgentX","agentO","setAgentO","newBoard","setTimeout","act","Helmet","Container","Row","Col","sm","agent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edc46c9a.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\n\nimport '../styles/Square.scss';\nimport { SquareState } from 'game/state';\n\ninterface SquareProps {\n  square: SquareState;\n  disabled?: boolean;\n  isPartOfWinner?: boolean;\n  onClick?: () => void;\n}\n\nexport default function Square({ square, disabled, isPartOfWinner, onClick }: SquareProps) {\n  return (\n    <Button\n      className=\"square\"\n      outline={!isPartOfWinner}\n      color=\"primary\"\n      size=\"lg\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {square}\n    </Button>\n  );\n}\n","import { flatMap } from 'lodash';\n\nexport enum Player {\n  X = 'X',\n  O = 'O'\n}\n\nexport enum SquareState {\n  X = 'X',\n  O = 'O',\n  Empty = ' '\n}\n\ntype Triple<T> = [T, T, T];\n\nexport type BoardState = Triple<Triple<SquareState>>;\n\nexport interface Position {\n  row: number;\n  col: number;\n}\n\nexport interface Action {\n  player: Player;\n  position: Position;\n}\n\nexport interface Winner {\n  player: Player;\n  triple: Position[];\n}\n\nexport const InitialBoard: BoardState = [\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty],\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty],\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty]\n];\n\nexport function nextPlayer(state: BoardState): Player {\n  let numX = 0;\n  let numO = 0;\n  state.forEach(row =>\n    row.forEach(square => {\n      switch (square) {\n        case SquareState.X:\n          numX++;\n          break;\n        case SquareState.O:\n          numO++;\n          break;\n        default:\n          break;\n      }\n    })\n  );\n  if (numX === numO) {\n    return Player.X;\n  } else if (numX === numO + 1) {\n    return Player.O;\n  } else {\n    console.log({ state, numX, numO });\n    throw new Error('Invalid board state!');\n  }\n}\n\nexport function validActions(state: BoardState): Action[] {\n  const player = nextPlayer(state);\n  const squares = flatMap(state, (boardRow, row) =>\n    boardRow.map((square, col) => ({ square, position: { row, col } }))\n  );\n  const validSquares = squares.filter(x => x.square === SquareState.Empty);\n  return validSquares.map(({ position }) => ({ player, position }));\n}\n\nexport function play(state: BoardState, action: Action): BoardState {\n  const {\n    player,\n    position: { row, col }\n  } = action;\n  if (state[row][col] !== SquareState.Empty) {\n    throw new Error('Square is not empty!');\n  }\n  const symbol = player === Player.X ? SquareState.X : SquareState.O;\n  return state.map((x, i) =>\n    x.map((y, j) => {\n      if (i !== row || j !== col) {\n        return y;\n      }\n      return symbol;\n    })\n  ) as BoardState;\n}\n\nconst range = [0, 1, 2];\n\nexport function rows(board: BoardState): Position[][] {\n  return range.map(row => range.map(col => ({ row, col })));\n}\n\nexport function cols(board: BoardState): Position[][] {\n  return range.map(col => range.map(row => ({ row, col })));\n}\n\nexport function diags(board: BoardState): Position[][] {\n  return [range.map(row => ({ row, col: row })), range.map(row => ({ row, col: 2 - row }))];\n}\n\n/** Return the current winner. Null if tie, undefined if game is not over yet. */\nexport function winner(board: BoardState): Winner | null | undefined {\n  const triples = [...rows(board), ...cols(board), ...diags(board)];\n\n  for (const triple of triples) {\n    if (triple.every(({ row, col }) => board[row][col] === SquareState.X)) {\n      return { player: Player.X, triple };\n    } else if (triple.every(({ row, col }) => board[row][col] === SquareState.O)) {\n      return { player: Player.O, triple };\n    }\n  }\n\n  if (board.some(row => row.some(x => x === SquareState.Empty))) {\n    return undefined;\n  }\n  return null;\n}\n","import React from 'react';\nimport Square from './Square';\nimport { BoardState, Action, Player, SquareState, Winner } from 'game/state';\n\ninterface BoardProps {\n  board: BoardState;\n  player: Player;\n  winner?: Winner | null;\n  onAction?: (action: Action) => void;\n}\n\nexport default function Board({ board, player, winner, onAction }: BoardProps) {\n  const isGameOver = winner !== undefined;\n  return (\n    <div>\n      {board.map((boardRow, row) => (\n        <div key={row}>\n          {boardRow.map((square, col) => (\n            <Square\n              key={col + square}\n              square={square}\n              isPartOfWinner={winner?.triple.some(x => x.row === row && x.col === col)}\n              disabled={isGameOver || square !== SquareState.Empty}\n              onClick={() => onAction?.({ player, position: { row, col } })}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { Player, BoardState, Action } from 'game/state';\n\nexport class Agent {\n  player: Player;\n  name?: string;\n  constructor(player: Player) {\n    this.player = player;\n  }\n\n  act(state: BoardState): Action {\n    throw new Error('Not implemented');\n  }\n}\n","import { sample } from 'lodash';\n\nimport { Agent } from './Agent';\nimport { BoardState, Action, validActions, Player } from 'game/state';\n\nexport class RandomAgent extends Agent {\n  constructor(player: Player) {\n    super(player);\n    this.name = `Random AI (${player})`;\n  }\n  act(state: BoardState): Action {\n    const actions = validActions(state);\n    return sample(actions)!;\n  }\n}\n","import { maxBy, minBy } from 'lodash';\n\nimport { Agent } from './Agent';\nimport { BoardState, Action, Player, winner, validActions, play, nextPlayer } from 'game/state';\n\nexport class MinmaxAgent extends Agent {\n  constructor(player: Player) {\n    super(player);\n    this.name = `Minmax AI (${player})`;\n  }\n\n  act(state: BoardState): Action {\n    return value(state)[1]!;\n  }\n}\n\n/**\n * Returns the min-max value of the board (1 if X wins, -1 if O wins, 0 if draw)\n * and the action that achieves that value.\n */\nfunction value(state: BoardState): [number, Action | null] {\n  const currentWinner = winner(state);\n\n  if (currentWinner) {\n    if (currentWinner.player === Player.X) {\n      return [1, null];\n    } else {\n      return [-1, null];\n    }\n  } else if (currentWinner === null) {\n    return [0, null];\n  } else {\n    const actions = validActions(state);\n    const frontier = actions.map(action => [value(play(state, action))[0], action] as [number, Action]);\n    if (nextPlayer(state) === Player.X) {\n      return maxBy(frontier, x => x[0])!;\n    } else {\n      return minBy(frontier, x => x[0])!;\n    }\n  }\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Container,\n  Col,\n  Row,\n  UncontrolledButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap';\nimport { Helmet } from 'react-helmet';\n\nimport Board from 'components/Board';\nimport { InitialBoard, BoardState, play, Action, Player, winner, nextPlayer } from 'game/state';\nimport { Agent } from 'agent/Agent';\n\nimport 'styles/App.scss';\nimport { RandomAgent } from 'agent/RandomAgent';\nimport { MinmaxAgent } from 'agent/MinmaxAgent';\n\nconst randomAgents = {\n  [Player.X]: new RandomAgent(Player.X),\n  [Player.O]: new RandomAgent(Player.O)\n};\n\nconst minmaxAgents = {\n  [Player.X]: new MinmaxAgent(Player.X),\n  [Player.O]: new MinmaxAgent(Player.O)\n};\n\nfunction App() {\n  const [board, setBoard] = useState<BoardState>(InitialBoard);\n  const [agentX, setAgentX] = useState<Agent | undefined>();\n  const [agentO, setAgentO] = useState<Agent | undefined>();\n  \n  const onAction = (action: Action) => {\n    const newBoard = play(board, action);\n    setBoard(newBoard);\n  };\n\n  const currentWinner = winner(board);\n\n  const player = nextPlayer(board);\n\n  const resetGame = () => {\n    setBoard(InitialBoard);\n  };\n\n  if (currentWinner === undefined) {\n    if (player === agentX?.player) {\n      setTimeout(onAction, 100, agentX.act(board));\n    } else if (player === agentO?.player) {\n      setTimeout(onAction, 100, agentO.act(board));\n    }\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Tic Tac Toe</title>\n      </Helmet>\n      <Container className=\"app\">\n        <Row className=\"title\">\n          <Col>\n            <h1>Tic tac toe</h1>\n          </Col>\n        </Row>\n        <Row className=\"players\">\n          <Col sm={3}>\n            <PlayerSelect\n              label={agentX?.name ?? 'Human (X)'}\n              player={Player.X}\n              onSelect={(agent?: Agent) => setAgentX(agent)}\n            />\n          </Col>\n          <Col sm={3}>\n            <PlayerSelect\n              label={agentO?.name ?? 'Human (O)'}\n              player={Player.O}\n              onSelect={(agent?: Agent) => setAgentO(agent)}\n            />\n          </Col>\n        </Row>\n        <Row className=\"player\">\n          <Col>\n            <h3>\n              {currentWinner === undefined && <>Current Player: {player}</>}\n              {currentWinner === null && <>It's a draw!</>}\n              {!!currentWinner && <>{currentWinner.player} has won the game!</>}\n            </h3>\n          </Col>\n        </Row>\n        <Row className=\"board\">\n          <Col>\n            <Board board={board} player={player} winner={currentWinner} onAction={onAction} />\n          </Col>\n        </Row>\n        <Row className=\"buttons\">\n          <Col>\n            <Button onClick={resetGame}>Reset Game</Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\ninterface PlayerSelectProps {\n  label: string;\n  player: Player;\n  onSelect: (agent?: Agent) => void;\n}\n\nfunction PlayerSelect({ label, player, onSelect }: PlayerSelectProps) {\n  const randomAgent = randomAgents[player];\n  const minmaxAgent = minmaxAgents[player];\n  return (\n    <UncontrolledButtonDropdown>\n      <DropdownToggle caret>{label}</DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem onClick={() => onSelect()}>Human ({player})</DropdownItem>\n        <DropdownItem onClick={() => onSelect(randomAgent)}>{randomAgent.name}</DropdownItem>\n        <DropdownItem onClick={() => onSelect(minmaxAgent)}>{minmaxAgent.name}</DropdownItem>\n      </DropdownMenu>\n    </UncontrolledButtonDropdown>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}