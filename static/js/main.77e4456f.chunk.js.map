{"version":3,"sources":["components/Square.tsx","game/state.ts","components/Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Square","square","disabled","isPartOfWinner","onClick","Button","className","outline","color","size","Player","SquareState","InitialBoard","Empty","range","winner","board","triples","map","row","col","triple","every","X","player","O","some","x","Board","onAction","isGameOver","undefined","boardRow","key","position","App","useState","setBoard","setPlayer","currentWinner","Helmet","Container","Row","Col","action","newBoard","state","Error","symbol","i","y","j","play","newPlayer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77e4456f.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'reactstrap';\n\nimport '../styles/Square.scss';\nimport { SquareState } from 'game/state';\n\ninterface SquareProps {\n  square: SquareState;\n  disabled?: boolean;\n  isPartOfWinner?: boolean;\n  onClick?: () => void;\n}\n\nexport default function Square({ square, disabled, isPartOfWinner, onClick }: SquareProps) {\n  return (\n    <Button\n      className=\"square\"\n      outline={!isPartOfWinner}\n      color=\"primary\"\n      size=\"lg\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {square}\n    </Button>\n  );\n}\n","export enum Player {\n  X = 'X',\n  O = 'O'\n}\n\nexport enum SquareState {\n  X = 'X',\n  O = 'O',\n  Empty = ' '\n}\n\ntype Triple<T> = [T, T, T];\n\nexport type BoardState = Triple<Triple<SquareState>>;\n\nexport interface Position {\n  row: number;\n  col: number;\n}\n\nexport interface Action {\n  player: Player;\n  position: Position;\n}\n\nexport interface Winner {\n  player: Player;\n  triple: Position[];\n}\n\nexport const InitialBoard: BoardState = [\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty],\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty],\n  [SquareState.Empty, SquareState.Empty, SquareState.Empty]\n];\n\nexport function play(state: BoardState, action: Action): BoardState {\n  const {\n    player,\n    position: { row, col }\n  } = action;\n  if (state[row][col] !== SquareState.Empty) {\n    throw new Error('Square is not empty!');\n  }\n  const symbol = player === Player.X ? SquareState.X : SquareState.O;\n  return state.map((x, i) =>\n    x.map((y, j) => {\n      if (i !== row || j !== col) {\n        return y;\n      }\n      return symbol;\n    })\n  ) as BoardState;\n}\n\nconst range = [0, 1, 2];\n\nexport function rows(board: BoardState): Position[][] {\n  return range.map(row => range.map(col => ({ row, col })));\n}\n\nexport function cols(board: BoardState): Position[][] {\n  return range.map(col => range.map(row => ({ row, col })));\n}\n\nexport function diags(board: BoardState): Position[][] {\n  return [range.map(row => ({ row, col: row })), range.map(row => ({ row, col: 2 - row }))];\n}\n\n/** Return the current winner. Null if tie, undefined if game is not over yet. */\nexport function winner(board: BoardState): Winner | null | undefined {\n  const triples = [...rows(board), ...cols(board), ...diags(board)];\n\n  for (const triple of triples) {\n    if (triple.every(({ row, col }) => board[row][col] === SquareState.X)) {\n      return { player: Player.X, triple };\n    } else if (triple.every(({ row, col }) => board[row][col] === SquareState.O)) {\n      return { player: Player.O, triple };\n    }\n  }\n\n  if (board.some(row => row.some(x => x === SquareState.Empty))) {\n    return undefined;\n  }\n  return null;\n}\n","import React from 'react';\nimport Square from './Square';\nimport { BoardState, Action, Player, SquareState, Winner } from 'game/state';\n\ninterface BoardProps {\n  board: BoardState;\n  player: Player;\n  winner?: Winner | null;\n  onAction?: (action: Action) => void;\n}\n\nexport default function Board({ board, player, winner, onAction }: BoardProps) {\n  const isGameOver = winner !== undefined;\n  return (\n    <div>\n      {board.map((boardRow, row) => (\n        <div key={row}>\n          {boardRow.map((square, col) => (\n            <Square\n              key={col + square}\n              square={square}\n              isPartOfWinner={winner?.triple.some(x => x.row === row && x.col === col)}\n              disabled={isGameOver || square !== SquareState.Empty}\n              onClick={() => onAction?.({ player, position: { row, col } })}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Button, Container, Col, Row } from 'reactstrap';\nimport { Helmet } from 'react-helmet';\n\nimport Board from 'components/Board';\nimport { InitialBoard, BoardState, play, Action, Player, winner } from 'game/state';\n\nimport 'styles/App.scss';\n\nfunction App() {\n  const [board, setBoard] = useState<BoardState>(InitialBoard);\n  const [player, setPlayer] = useState<Player>(Player.X);\n  const onAction = (action: Action) => {\n    const newBoard = play(board, action);\n    const newPlayer = player === Player.X ? Player.O : Player.X;\n    setBoard(newBoard);\n    setPlayer(newPlayer);\n  };\n\n  const currentWinner = winner(board);\n\n  const resetGame = () => {\n    setBoard(InitialBoard);\n    setPlayer(Player.X);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Tic Tac Toe</title>\n      </Helmet>\n      <Container className=\"app\">\n        <Row className=\"title\">\n          <Col>\n            <h1>Tic tac toe</h1>\n          </Col>\n        </Row>\n        <Row className=\"player\">\n          <Col>\n            <h3>\n              {currentWinner === undefined && <>Current Player: {player}</>}\n              {currentWinner === null && <>It's a draw!</>}\n              {!!currentWinner && <>{currentWinner.player} has won the game!</>}\n            </h3>\n          </Col>\n        </Row>\n        <Row className=\"board\">\n          <Col>\n            <Board board={board} player={player} winner={currentWinner} onAction={onAction} />\n          </Col>\n        </Row>\n        <Row className=\"buttons\">\n          <Col>\n            <Button onClick={resetGame}>Reset Game</Button>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}